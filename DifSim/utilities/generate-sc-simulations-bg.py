#!/usr/bin/env python

import sys
import math
import numpy

b = float(sys.argv[1])
gradientStrength = float(sys.argv[2])
deltaGap = int(sys.argv[3])
timeStep = 10
if len(sys.argv) > 4:
    timeStep = int(sys.argv[4])
# inputs
#
# b: b value, units of s/mm^2
# g: gradient strength, units of G/cm
# deltaGap: distance between gradient pulses, units of microseconds
#    bigDelta = littleDelta + deltaGap
#
# *** Note that the current implementation of diffsim assumes that big
#     delta is the time from the end of the first pulse to the start
#     of the second pulse. In this script, that value is called
#     deltaGap.  The usual definition is that big delta is the time
#     from the start of the first pulse to the start of the second
#     pulse.
#
#     The output from this script includes bigDelta (deltaGap). If
#     diffsim is ever changed to use the conventional definition of
#     big delta, this script will need to be updated.

gSquared = 26752.0 * 26752.0 # (gamma is in rad/G/s)

# Returns littleDelta in microseconds, but the value needs to be
# rounded to a multiple of 10.
littleDelta = numpy.roots([2.0/3.0, deltaGap, 0.0,
                           -1e20 * b /
                           (gSquared*gradientStrength*gradientStrength)
                           ])[2].real
littleDelta = round(littleDelta/10.0) * 10

standardValues = '''# Generated by the script generate-sc-simulations-bg.py
#
# These parameters give a b value of %0.2f s/mm^2
#
Delta = %d  # in microseconds (Delta - delta using standard definitions)
delta = %d  # in microseconds
mixing time = 0 # in microseconds (only for DPFG pulses)
gradient strength = %f  # in G/cm
ramp = 0  # in microseconds (for both leading and trailing edges)
pulse = 1  # 0 = gradient echo; 1 = spin echo; 2 = DPFG
periodic = 1  # periodic boundary conditions
snr = 100  # signal-to-noise ratio (percent)
voxel size = 40  # in microns, needs to be bigger than largest dim
cylinder array = 0  # periodic array
three region = 0  # core-sheath-bath like in Sen-Basser paper
permeable = 0  # default is permeable = 1
gradient directions = 90

#
# Parameters to match Sen-Basser (2005)
#
core radius = 12.0  # in microns -- doubled to compensate for
                                  # z-cylinder-radius-1.mdl really
                                  # being radius 0.5 microns.
cylinder height = 20  # in microns
x dim = 15.0  # in microns
y dim = 15.0  # in microns
z dim = 15.0  # in microns

nstep = 1  # number of steps (not used)
step size = %d  # time step length in microseconds
nparts = 100000  # number of diffusing molecules
structure file = ../z-cylinder-radius-1.mdl  # mcell file describing geometry
signal file = signal-sc.txt # output file for signal amplitude
complex signal file = complex-sc.txt # output file for complex signal data
'''

f = open('sc.txt', 'w')
f.write(standardValues % (b, deltaGap, littleDelta, gradientStrength, timeStep))
f.close()

