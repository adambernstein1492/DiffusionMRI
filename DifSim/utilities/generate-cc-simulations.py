#!/usr/bin/env python

import sys
import math

b = float(sys.argv[1])
littleDelta = float(sys.argv[2])
bigDelta = float(sys.argv[3])
timeStep = 10
if len(sys.argv) > 4:
    timeStep = int(sys.argv[4])
# inputs
#
# b: b value, units of s/mm^2
# littleDelta: little delta (gradient pulse width), units of microseconds
# bigDelta: big delta (pulse separation), units of microseconds
#
# *** Note that the current implementation of diffsim assumes that big
#     delta is the time from the end of the first pulse to the start
#     of the second pulse. The usual definition is that big delta is
#     the time from the start of the first pulse to the start of the
#     second pulse.
#
#     To make life easier for me, this script will assume that the
#     input big delta is defined according to convention, but it will
#     output simulations with big delta redefined to match what
#     diffsim assumes.
#
#     This adjustment should be removed if diffsim is ever changed to
#     use the conventional definition of big delta.

gSquared = 26752.0 * 26752.0 # (gamma is in rad/G/s)

# returns gradient strength in G/cm, which is what diffsim expects
gradientStrength = math.sqrt(1.0e20 * b/(gSquared * littleDelta * littleDelta * (bigDelta - littleDelta/3.0)))



standardValues = '''# Generated by the script generate-cc-simulations.py
#
# These parameters give a b value of %0.2f s/mm^2
#
Delta = %d  # in microseconds (Delta - delta using standard definitions)
delta = %d  # in microseconds
mixing time = 0 # in microseconds (only for DPFG pulses)
gradient strength = %f  # in G/cm
ramp = 0  # in microseconds (for both leading and trailing edges)
pulse = 1  # 0 = gradient echo; 1 = spin echo; 2 = DPFG
periodic = 1  # periodic boundary conditions
snr = 100  # signal-to-noise ratio (percent)
voxel size = 40  # in microns, needs to be bigger than largest dim
cylinder array = 1  # periodic array
three region = 1  # core-sheath-bath like in Sen-Basser paper
permeable = 1  # default is permeable = 1
gradient directions = 2

#
# Parameters to match Sen-Basser (2005)
#
core radius = 6.0  # in microns
sheath radius = %0.2f  # in microns
cylinder height = 20  # in microns
x dim = 18.2  # in microns
y dim = 31.5233246978  # in microns
z dim = 15  # in microns

nstep = 1  # number of steps (not used)
step size = %d  # time step length in microseconds
nparts = 10000  # number of diffusing molecules
structure file = ../../z-cylinder-radius-1-c.mdl  # mcell file describing geometry
sheath file = ../../z-cylinder-radius-1-s.mdl  # mcell file describing geometry
signal file = signal-cc-r-%0.2f.txt # output file for signal amplitude
complex signal file = complex-cc-r-%0.2f.txt # output file for complex signal data
'''

for i in range(1,62):
    r = 6.0 + i*0.05
    f = open('cc-r-%0.2f.txt' % (r), 'w')
    f.write(standardValues % (b, bigDelta - littleDelta, littleDelta, gradientStrength, r, timeStep, r, r))
    f.close()

