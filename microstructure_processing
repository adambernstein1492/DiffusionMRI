#!/usr/bin/env python

import os
import subprocess
import argparse
import shutil
import lpca_denoising
import nibabel as nib
import dipy.io
import diffusion_preprocessing_functions
import dti
import map
import amico
#import dki


### DEFINE INPUTS ##############################################################
parser = argparse.ArgumentParser(description="Process a Diffusion MRI dataset using any of several microstructural analysis techniques")
parser.add_argument("-d", "--dti", action="store_true", help="Perform Diffusion Tensor Imaging", default=False)
parser.add_argument("-k", "--dki", action="store_true", help="Perform Diffusion Kurtosis Imaging", default=False)
parser.add_argument("-n", "--noddi", action="store_true", help="Perform Neurite Orientation Dispersion and Density Imaging(NODDI)", default=False)
parser.add_argument("-a", "--afd", action="store_true", help="Estimate the Apparent Fiber Density using MRtrix", default=False)
parser.add_argument("-m", "--map", type=str, help="Estimate the Mean Apparent Propagator (MAP). Must specify diffusion times", nargs=2, default="None")
parser.add_argument("Image", type=str, help="Diffusion Weighted MRI filepath (Assumes preprocessing has been performed)")
parser.add_argument("bval", type=str, help="b-value filepath")
parser.add_argument("bvec", type=str, help="b-vector filepath")
parser.add_argument("mask", type=str, help="mask filepath")
parser.add_argument("Output", type=str, help="Output directory for the final processed DWI")

args = parser.parse_args()
################################################################################



### ERROR HANDLING #############################################################

################################################################################



# Create Output Directory for Processing
if args.Output[-1] != '/':
    outpath = args.Output + '/'
else:
    outpath = args.Output
os.mkdir(outpath)

### DTI ########################################################################
if args.dti:
    print "Performing DTI Analysis:"
    dti_outpath = outpath + "DTI/"
    os.mkdir(dti_outpath)

    dti.main_dti(args.Image, args.bval, args.bvec, args.mask, dti_outpath, b_thresh=1500)
################################################################################



### DKI ########################################################################
################################################################################



### MAP ########################################################################
if(args.map != "None"):
    print "Performing MAP Analysis:"
    map_outpath = outpath + "MAP/"
    os.mkdir(map_outpath)

    d = float(args.map[0])
    D = float(args.map[1])

    map.main_map(args.Image, args.bval, args.bvec, args.mask, d, D, map_outpath, order = 6, b_thresh_dti=1500)
################################################################################



### AFD ########################################################################
if args.afd:
    print "Performing AFD Analysis"

    afd_outpath = outpath + "AFD/"
    os.mkdir(afd_outpath)

    # Fit FODs and Estimate AFD using MRtrix3
    subprocess.call(["mrconvert", "-fslgrad", args.bvec, args.bval, args.Image, (afd_outpath + "dwi.mif")])
    subprocess.call(["dwi2response", "tournier", (afd_outpath + "dwi.mif"), (afd_outpath + "response.txt")])
    subprocess.call(["dwi2fod", "csd", (afd_outpath + "dwi.mif"), (afd_outpath + "response.txt"), (afd_outpath + "fod.mif"), "-mask", args.mask])
    subprocess.call(["fod2fixel", (afd_outpath + "fod.mif"), (afd_outpath + "temp"), "-afd", "afd.mif"])

    # Sort Output
    shutil.move((afd_outpath + "temp/afd.mif"), (afd_outpath + "afd.mif"))
    os.remove(afd_outpath + "dwi.mif")
    os.remove(afd_outpath + "fod.mif")
    os.remove(afd_outpath + "response.txt")
    shutil.rmtree(afd_outpath + "temp")
################################################################################



### NODDI ######################################################################
if args.noddi:
    print "Performing NODDI Analysis"
    os.makedirs((outpath + "NODDI/Study01/Subject01"))

    shutil.copyfile(args.Image, (outpath + "NODDI/Study01/Subject01/dwi.nii"))
    shutil.copyfile(args.bval, (outpath + "NODDI/Study01/Subject01/bval"))
    shutil.copyfile(args.bvec, (outpath + "NODDI/Study01/Subject01/bvec"))
    shutil.copyfile(args.mask, (outpath + "NODDI/Study01/Subject01/mask.nii"))

    os.chdir(outpath + "NODDI")

    # Run AMICO
    amico.core.setup()
    ae = amico.Evaluation("Study01", "Subject01")
    amico.util.fsl2scheme("Study01/Subject01/bval", "Study01/Subject01/bvec", scheme_Filename = "None", bStep = 10.0, delimiter = " ")
    ae.load_data(dwi_filename = "dwi.nii", scheme_filename = "bval.scheme", mask_filename = "mask.nii", b0_thr = 0)
    ae.set_model("NODDI")
    ae.generate_kernels()
    ae.load_kernels()
    ae.fit()
    ae.save_results()

    # Clean Up Results
    shutil.move((outpath + "NODDI/Study01/Subject01/AMICO/NODDI/FIT_ICVF.nii.gz"), (outpath + "NODDI/ICVF.nii.gz"))
    shutil.move((outpath + "NODDI/Study01/Subject01/AMICO/NODDI/FIT_OD.nii.gz"), (outpath + "NODDI/OD.nii.gz"))
    shutil.move((outpath + "NODDI/Study01/Subject01/AMICO/NODDI/FIT_ISOVF.nii.gz"), (outpath + "NODDI/ICOVF.nii.gz"))
    os.remove(outpath + "NODDI/Study01/Subject01/dwi.nii")
    os.remove(outpath + "NODDI/Study01/Subject01/mask.nii")
    shutil.rmtree("Study01")
################################################################################
