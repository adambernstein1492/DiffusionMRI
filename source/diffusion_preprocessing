#! /usr/bin/env python

import os
import subprocess
import argparse
import shutil
import diffusion_functions.lpca_denoising as lpca_denoising
import nibabel as nib
import dipy.io
import diffusion_functions.diffusion_preprocessing_functions as diffusion_preprocessing_functions
import diffusion_functions.util as util
import time

### DEFINE INPUTS ##############################################################
parser = argparse.ArgumentParser(description="Run a conventional diffusion MRI through the entire preprocessing pipeline")
parser.add_argument("-l", "--denoising", action="store_true", help="Perform LPCA denoising. Default=False", default=False)
parser.add_argument("-b", "--biasfieldcorrection", action="store_true", help="Perform N4 correction. Default=False", default=False)
parser.add_argument("-e", "--eddycurrentcorrection", action="store_true", help="Perform eddy current correction. Default=False", default=False)
parser.add_argument("-r", "--epidistortion", type=str, help="Reverse phase encode image. Specify 'All' or 'b0'. Default=None", nargs=2, default="None", metavar=('RPE_image', 'Number_DWIs'))
parser.add_argument("-f", "--field_map", type=str, help="echo spacing for field map computation in ms", default="None", metavar=('esp'))
parser.add_argument("-m", "--mask", type=str, help="Filepath to a mask image to be used. Default=None)", default="None", metavar=('mask'))
parser.add_argument("-a", "--structural", help="TORTOISE: Anatomical NIFTI image", default="None", metavar=('structural_image'))
parser.add_argument("-k", "--is_non_human", action="store_true", help="TORTOISE: is human brain? Default=False", default=False)
parser.add_argument("-v", "--voxel_size", type=str, help="Final Voxel size for corrected image", nargs=3, default="None", metavar=('vx', 'vy', 'vz'))
parser.add_argument("-d", "--diffusion_times", type=str, help="Gradient timing parameters d and D", nargs=2, default="None", metavar=('d', 'D'))
parser.add_argument("-s", "--software", type=str, help="Software to use for distortion correction. Default=FSL", choices=["FSL","TORTOISE_DRBUDDI", "TORTOISE_STANDARD"], default="FSL")
parser.add_argument("-c", "--cleanup", action="store_true", help="Tells script to remove all intermediate files", default=False)
parser.add_argument("Image", type=str, help="Diffusion Weighted MRI filepath")
parser.add_argument("bval", type=str, help="b-value filepath")
parser.add_argument("bvec", type=str, help="b-vector filepath")
parser.add_argument("Output", type=str, help="Output directory for the final processed DWI")

args = parser.parse_args()
################################################################################

# Save Script location to call Config files later
file_location = os.path.dirname(__file__)

### ERROR CHECKING #############################################################
# Check Required Inputs
util.check_diffusion_input(args.Image, args.bval, args.bvec, args.mask)

if args.biasfieldcorrection:
    try:
        subprocess.call(["which", "N4BiasFieldCorrection"])
    except:
         print "Error: N4 not found on path"
         quit()


if args.eddycurrentcorrection:
    # Check for Appropriate Software
    if args.software == "FSL":
        try:
            subprocess.call(["which", "eddy_openmp"])
        except:
            print "Error: eddy not found on path"
            quit()
    if args.software == "TORTOISE_DRBUDDI" or args.software == "TORTOISE_STANDARD":
        try:
            subprocess.call(["which", "ImportNIFTI"])
            subprocess.call(["which", "DIFFPREP"])
        except:
            print "Error: DIFFPREP not found on path"
            quit()


if args.epidistortion != "None":
    # Check for Appropriate Software
    if args.software == "FSL":
        try:
            subprocess.call(["which", "topup"])
        except:
            print "Error: TOPUP not found on path"
            quit()
    if args.software == "TORTOISE_DRBUDDI":
        try:
            subprocess.call(["which", "DR_BUDDI_withoutGUI"])
        except:
            print "Error: DR_BUDDI not found on path"
            quit()

    # Check for Correct input type
    if args.software == "TORTOISE_DRBUDDI" and args.epidistortion[0] == "None":
        print "Error: You must specify a Reverse Phase Encode Image to run DRBUDDI"
        quit()

    if(args.software == "TORTOISE_DRBUDDI" and (args.epidistortion[1] != "b0" and args.epidistortion[1] != "All")):
        print "Error: The second argument for epidistortion must be either 'All' or 'b0'"
        quit()

    if args.software == "TORTOISE_DRBUDDI":
        if args.structural == "None":
            print "Error: You must specify a structural image to run DRBUDDI"
            quit()

        try:
            rpe = nib.load(args.epidistortion[0])
        except:
            print "Error: Input for DRBUDDI must be a NIFTI"
            quit()

        dwi = nib.load(args.Image)
        if dwi.shape[0:3] != rpe.shape[0:3]:
            print "Error: Image and RPE must both be the same size"
            print "DWI size: " + str(dwi.shape)
            print "RPE size: " + str(rpe.shape)
            quit()

    if (args.software is "TORTOISE_STANDARD" or args.software is "TORTOISE_DRBUDDI") and args.structural != "None":
        try:
            t2 = nib.load(args.epidistortion[0])
        except:
            print "Error: Structural input for distortion correction must be an anatomical NIFTI"
            quit()

        if len(t2.shape) != 3:
            print "Error: Anatomical Image must be 3D"
            quit()

if args.mask != "None":
    try:
        mask = nib.load(args.mask)
        dwi = nib.load(args.Image)
    except:
        print "Error: Mask image must be a NIFTI file"
        quit()

    if dwi.shape[0:3] != mask.shape[0:3]:
        print "Error: Mask image must be the same size as the Image"
        quit()

if args.voxel_size != "None" and args.software is "FSL":
    try:
        subprocess.call(["which", "mrresize"])
    except:
        print "Error: Must have MRtrix3 installed to regrid the image"
        quit()
################################################################################



### SETUP OUTPUT DIRECTORY #####################################################
# Create Output Directory for Processing
if args.Output[-1] != '/':
    outpath = args.Output + '/'
else:
    outpath = args.Output

if os.path.isdir(outpath):
    pass
else:
    os.makedirs(outpath)

shutil.copyfile(args.Image, (outpath + 'dwi.nii'))
shutil.copyfile(args.bval, (outpath + 'bval'))
shutil.copyfile(args.bvec, (outpath + 'bvec'))

if args.mask != "None":
    shutil.copyfile(args.mask, (outpath + 'mask.nii'))

if args.epidistortion != "None":
    if args.software == 'FSL' or args.software == 'TORTOISE_DRBUDDI':
        shutil.copyfile(args.epidistortion[0], (outpath + 'rpe.nii'))
if args.structural != "None":
    shutil.copyfile(args.structural, (outpath + 'struct.nii'))

os.chdir(outpath)

# Reorganize DWI
if args.software == "TORTOISE_DRBUDDI" or args.software == "TORTOISE_STANDARD":
    subprocess.call(["fslreorient2std", "dwi.nii", "dwi_std.nii"])
    os.remove("dwi.nii")
    os.rename("dwi_std.nii", "dwi.nii")
    subprocess.call(["fslreorient2std", "struct.nii", "struct_std.nii"])
    os.remove("struct.nii")
    os.rename("struct_std.nii", "struct.nii")
    
    if args.software == "TORTOISE_DRBUDDI":
        subprocess.call(["fslreorient2std", "rpe.nii", "rpe_std.nii"])
        os.remove("rpe.nii")
        os.rename("rpe_std.nii", "rpe.nii")
        
        if args.epidistortion[1] == "All":
            shutil.copyfile("bval", "rpe_bval")
            shutil.copyfile("bvec", "rpe_bvec")
            diffusion_preprocessing_functions.organize_by_bval("rpe.nii", "rpe_bval", "rpe_bvec")
        
diffusion_preprocessing_functions.organize_by_bval("dwi.nii", "bval", "bvec")

    

# Set Voxel sizes
if args.voxel_size == "None":
    voxel_size = []
    voxels = nib.load('dwi.nii').header.get_zooms()
    voxel_size.append(str(voxels[0]))
    voxel_size.append(str(voxels[1]))
    voxel_size.append(str(voxels[2]))

else:
     voxel_size = args.voxel_size
################################################################################



### FSL DISTORTION CORRECTION ##################################################
if args.software == "FSL":

    print
    os.environ["FSLOUTPUTTYPE"] = "NIFTI"

    # Run TOPUP if specified
    if args.epidistortion != "None":
        # Create ACQP and INDEX text files
        if args.field_map != "None":
            diffusion_preprocessing_functions.write_index_acqp('dwi.nii', 'bval', 'bvec', 'rpe.nii', float(args.field_map))
        else:
            diffusion_preprocessing_functions.write_index_acqp('dwi.nii', 'bval', 'bvec', 'rpe.nii')
        topup_config = file_location + "/config/b02b0.cnf"

        print "Running TOPUP"
        if args.field_map != "None":
            subprocess.call(["topup", "--imain=B0s.nii", "--datain=acqp.txt", ("--config=" + topup_config), "--out=topup_results", "--iout=b0_corrected", "--fout=fm", "-v"])
        else:
            subprocess.call(["topup", "--imain=B0s.nii", "--datain=acqp.txt", ("--config=" + topup_config), "--out=topup_results", "--iout=b0_corrected", "-v"])

        if args.mask == "None":
            subprocess.call(["fslmaths", "b0_corrected", "-Tmean", "b0_corrected"])
            subprocess.call(["bet", "b0_corrected", "brain", "-m", "-f", "0.3", "-R"])
            os.remove("brain.nii")
            shutil.move("brain_mask.nii", "mask.nii")

        # Run EDDY if specified
        if args.eddycurrentcorrection:
            print "Running EDDY"
            subprocess.call(["eddy_openmp", "--imain=dwi.nii", "--mask=mask.nii", "--index=index.txt", "--acqp=acqp.txt", "--bvecs=bvec", "--bvals=bval", "--out=dwi_eddy", "--topup=topup_results", "--data_is_shelled", "-v"])
            os.remove("dwi.nii")
            shutil.move("dwi_eddy.nii", "dwi.nii")

            # Replace old bvec file with rotated_bvec file
            os.remove("bvec")
            shutil.move("dwi_eddy.eddy_rotated_bvecs", "bvec")

        # Clean up extra files
        if args.cleanup:
            os.remove("acqp.txt")
            os.remove("b0_corrected.nii")
            os.remove("B0s.nii")
            os.remove("B0s.topup_log")
            os.remove("dwi_eddy.eddy_movement_rms")
            os.remove("dwi_eddy.eddy_outlier_map")
            os.remove("dwi_eddy.eddy_outlier_n_stdev_map")
            os.remove("dwi_eddy.eddy_outlier_report")
            os.remove("dwi_eddy.eddy_parameters")
            os.remove("dwi_eddy.eddy_post_eddy_shell_alignment_parameters")
            os.remove("dwi_eddy.eddy_outlier_n_sqr_stdev_map")
            os.remove("dwi_eddy.eddy_restricted_movement_rms")
            os.remove("index.txt")
            os.remove("rpe.nii")
            os.remove("topup_results_fieldcoef.nii")
            os.remove("topup_results_movpar.txt")

    if ((args.eddycurrentcorrection is True) and (args.epidistortion == "None")):
        # Create ACQP and INDEX text files
        diffusion_preprocessing_functions.no_topup_index_acqp('bval', 'bvec')

    	if args.mask == "None":
    		    subprocess.call(["bet", "dwi", "brain", "-m", "-f", "0.3", "-R"])
    		    os.remove("brain.nii")
    		    shutil.move("brain_mask.nii", "mask.nii")

        print "Running EDDY"
        subprocess.call(["eddy_openmp", "--imain=dwi.nii", "--mask=mask.nii", "--index=index.txt",
                         "--acqp=acqp.txt", "--bvecs=bvec", "--bvals=bval", "--out=dwi",
                         "--data_is_shelled", "-v"])

        # Replace old bvec file with rotated_bvec file
        os.remove("bvec")
        shutil.move("dwi.eddy_rotated_bvecs", "bvec")

        # Clean up extra files
        if args.cleanup:
            os.remove("acqp.txt")
            os.remove("index.txt")
            os.remove("dwi.eddy_restricted_movement_rms")
            os.remove("dwi.eddy_movement_rms")
            os.remove("dwi.eddy_outlier_map")
            os.remove("dwi.eddy_outlier_n_sqr_stdev_map")
            os.remove("dwi.eddy_outlier_n_stdev_map")
            os.remove("dwi.eddy_outlier_report")
            os.remove("dwi.eddy_parameters")
            os.remove("dwi.eddy_post_eddy_shell_alignment_parameters")
################################################################################



### TORTOISE DISTORTION CORRECTION WITH DR_BUDDI ###############################
if args.software == "TORTOISE_DRBUDDI":
    if args.is_non_human:
        is_human_brain = "0"
        distortion_level = "very_large"
    else:
        is_human_brain = "1"
        distortion_level = "medium"

    # Create blank bval and bvec files for rpe images
    if(args.epidistortion[1] == "b0"):
        diffusion_preprocessing_functions.create_bvals_bvecs_rpe("rpe.nii")

        # Import NIFTI
        if(args.diffusion_times == "None"):
            subprocess.call(["ImportNIFTI", "-i", "dwi.nii", "-p", "vertical", "-b", "bval", "-v", "bvec"])
        else:
            subprocess.call(["ImportNIFTI", "-i", "dwi.nii", "-p", "vertical", "-b", "bval", "-v", "bvec",
                             "-d", args.diffusion_times[0], "-D", args.diffusion_times[1]])

        subprocess.call(["ImportNIFTI", "-i", "rpe.nii", "-p", "vertical", "-b", "rpe_bval", "-v", "rpe_bvec"])

    elif(args.epidistortion[1] == "All"):
        # Import NIFTI
        if(args.diffusion_times == "None"):
            subprocess.call(["ImportNIFTI", "-i", "dwi.nii", "-p", "vertical", "-b", "bval", "-v", "bvec"])
            subprocess.call(["ImportNIFTI", "-i", "rpe.nii", "-p", "vertical", "-b", "rpe_bval", "-v", "rpe_bvec"])
        else:
            subprocess.call(["ImportNIFTI", "-i", "dwi.nii", "-p", "vertical", "-b", "bval", "-v", "bvec",
                             "-d", args.diffusion_times[0], "-D", args.diffusion_times[1]])
            subprocess.call(["ImportNIFTI", "-i", "rpe.nii", "-p", "vertical", "-b", "rpe_bval", "-v", "rpe_bvec",
                             "-d", args.diffusion_times[0], "-D", args.diffusion_times[1]])

    # Run DIFFPREP
    subprocess.call(["DIFFPREP", "-i", "dwi_proc/dwi.list", "-s", "struct.nii", "-c", "quadratic",
                     "-e", "off", "--denoising", "for_reg", "--gibbs_ringing_correction", "on",
                     "--will_be_drbuddied", "--is_human_brain", is_human_brain, "--upsampling", "all",
                     "--dti_bval", "1000", "--MAPMRI_bval", "3000", "--keep_intermediate", "0",
                     "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

    rpe = nib.load("rpe.nii")
    if(len(rpe.shape) == 3):
        # Run DR. BUDDI
        subprocess.call(["DR_BUDDI_withoutGUI", "--up_data", "dwi_proc/dwi_proc.list",
                         "--down_data", "rpe_proc/rpe.list", "--structural", "struct.nii",
                         "--enforce_deformation_antisymmetry", "1", "distortion_level", distortion_level,
                         "--n_DWIs", "0", "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

    elif(len(rpe.shape) == 4):
        # Run DIFFPREP on rpe data
        subprocess.call(["DIFFPREP", "-i", "rpe_proc/rpe.list", "-s", "struct.nii", "-c", "quadratic",
                         "-e", "off", "--denoising", "for_reg", "--gibbs_ringing_correction", "on",
                         "--will_be_drbuddied", "--is_human_brain", is_human_brain, "--upsampling", "all",
                         "--dti_bval", "1000", "--MAPMRI_bval", "3000", "--keep_intermediate", "0",
                         "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

        # Run DR. BUDDI
        if(args.epidistortion[1] == "b0"):
            subprocess.call(["DR_BUDDI_withoutGUI", "--up_data", "dwi_proc/dwi_proc.list",
                             "--down_data", "rpe_proc/rpe_proc.list", "--structural", "struct.nii",
                             "--n_DWIs", "0", "--enforce_deformation_antisymmetry", "1", "--distortion_level", distortion_level,
                             "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

            subprocess.call(["TORTOISEBmatrixToFSLBVecs", "dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_up_final.bmtxt"])

            os.remove("bval")
            os.remove("bvec")
            os.remove("dwi.nii")
            os.remove("rpe.nii")
            os.remove("struct.nii")

            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_up_final.nii", "dwi.nii")
            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_up_final.bvals", "bval")
            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_up_final.bvecs", "bvec")
            shutil.move("dwi_proc_DRBUDDI_proc/structural_used.nii", "struct.nii")

        if(args.epidistortion[1] == "All"):
            subprocess.call(["DR_BUDDI_withoutGUI", "--up_data", "dwi_proc/dwi_proc.list",
                             "--down_data", "rpe_proc/rpe_proc.list", "--structural", "struct.nii",
                             "--enforce_deformation_antisymmetry", "1", "--distortion_level", distortion_level,
                             "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

            subprocess.call(["TORTOISEBmatrixToFSLBVecs", "dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_final.bmtxt"])

            os.remove("bval")
            os.remove("bvec")
            os.remove("dwi.nii")
            os.remove("rpe.nii")
            os.remove("struct.nii")

            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_final.nii", "dwi.nii")
            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_final.bvals", "bval")
            shutil.move("dwi_proc_DRBUDDI_proc/dwi_proc_DRBUDDI_final.bvecs", "bvec")
            shutil.move("dwi_proc_DRBUDDI_proc/structural_used.nii", "struct.nii")

    # Compute SNR and FM
    #if(len(rpe.shape) == 4):
        #snr = diffusion_preprocessing_functions.tSNR("dwi_proc_DRBUDDI_proc/rpe_proc_DRBUDDI_down_final.nii",
        #           "dwi_proc_DRBUDDI_proc/rpe_proc_DRBUDDI_down_final.bvals",
        #           "dwi_proc_DRBUDDI_proc/rpe_proc_DRBUDDI_down_final.bvecs",
        #           "snr.nii")

    if(args.field_map != "None"):
		subprocess.call(["mrconvert", "dwi_proc_DRBUDDI_proc/deformation_FINV.nii.gz", "dwi_proc_DRBUDDI_proc/deformation_FINV.nii"])
		fm = diffusion_preprocessing_functions.field_map("dwi_proc_DRBUDDI_proc/deformation_FINV.nii", "fm.nii", float(args.field_map))

    # Clean up extra files
    if args.cleanup:

        shutil.rmtree("dwi_proc_DRBUDDI_proc")
        shutil.rmtree("dwi_proc")
        shutil.rmtree("rpe_proc")

    if(args.mask == "None"):
        subprocess.call(["dwi2mask", "-fslgrad", "bvec", "bval", "dwi.nii", "mask.nii"])
################################################################################



### TORTOISE DISTORTION CORRECTION WITH T2 #####################################
if args.software == "TORTOISE_STANDARD":

    if args.is_non_human:
        is_human_brain = "0"
    else:
        is_human_brain = "1"

    # Import NIFTI
    subprocess.call(["ImportNIFTI", "-i", "dwi.nii", "-p", "vertical", "-b", "bval", "-v", "bvec"])

    if args.structural != "None":
        # Run DIFFPREP with T2
        subprocess.call(["DIFFPREP", "-i", "dwi_proc/dwi.list", "-s", "struct.nii", "-c",
                         "quadratic", "-e", "ITKBSPv4", "--upsampling", "all", "--dti_bval", "1000",
                         "--MAPMRI_bval", "3000", "--is_human_brain", is_human_brain, "--keep_intermediate", "0",
                         "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

    if args.structural == "None":
        # Run DIFFPREP without T2
        subprocess.call(["DIFFPREP", "-i", "dwi_proc/dwi.list", "-c", "quadratic",
                         "-e", "off", "--upsampling", "all", "--dti_bval", "1000",
                         "MAPMRI_bval", "3000", "--is_human_brain", is_human_brain, "--keep_intermediate", "0",
                         "--res", voxel_size[0], voxel_size[1], voxel_size[2]])

    # Move Output to Upper Level

    # Clean up Extra Files
    if args.cleanup:
        pass

    if(args.mask == "None"):
        subprocess.call(["dwi2mask", "-fslgrad", "bvec", "bval", "dwi.nii", "mask.nii"])
################################################################################



### DENOISING ##################################################################
if args.denoising:
    print "Running Denoising"
    lpca_denoising.lpca_denoising("dwi.nii", "bval", "bvec", "dwi_denoised.nii")

    os.remove("dwi.nii")
    shutil.move("dwi_denoised.nii", "dwi.nii")
################################################################################



### BIAS FIELD CORRECTION ######################################################
if args.biasfieldcorrection:
    diffusion_preprocessing_functions.create_avg_b0("dwi.nii", "bval", "bvec")

    print "Matching Mask and DWI header info"
    diffusion_preprocessing_functions.remove_header('mean_b0.nii', 'mean_b0_bias.nii')
    diffusion_preprocessing_functions.remove_header('mask.nii', 'mask_bias.nii')

    print "Calculating Bias Field"
    subprocess.call(["N4BiasFieldCorrection", "-d", "3", "-i", "mean_b0_bias.nii", "-x", "mask_bias.nii", "-v", "-o", "[bias_correct.nii,field.nii]"])

    print "Applying Bias Field"
    diffusion_preprocessing_functions.apply_bias_field("dwi.nii", "field.nii")

    # Clean up Extra Files
    if args.cleanup:
        os.remove("field.nii")
        os.remove("mask_bias.nii")
        os.remove("bias_correct.nii")
        os.remove("mean_b0.nii")
        os.remove("mean_b0_bias.nii")
################################################################################

### INTERPOLATE DWI IF INDICATED ###############################################
if (args.software == 'FSL'):
    subprocess.call(["mrresize", "-voxel", (voxel_size[0] + "," + voxel_size[1] + "," + voxel_size[2]), "dwi.nii", "dwi_resize.nii"])
    while True:
        try:
            os.remove('dwi.nii')
            os.remove('mask.nii')
        except:
            continue
        else:
            break
    shutil.move('dwi_resize.nii', 'dwi.nii')

    if(args.mask == "None"):
        subprocess.call(["dwi2mask", "-fslgrad", "bvec", "bval", "dwi.nii", "mask.nii"])
################################################################################
